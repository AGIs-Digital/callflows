name: Deploy to Production

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: deploy-production-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: üõ†Ô∏è Checkout code
        uses: actions/checkout@v3

      - name: üåê Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: |
          npm install --no-fund
          npm audit fix --force || true

      - name: üîß Create .env file
        run: |
          cat > .env << EOL
          NEXT_PUBLIC_APP_URL=${{ secrets.PRODUCTION_APP_URL }}
          NEXT_PUBLIC_ENVIRONMENT=production
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
          echo "SMTP_FROM=\"${{ secrets.SMTP_FROM }}\"" >> .env
          echo "CONTACT_EMAIL=\"${{ secrets.CONTACT_EMAIL }}\"" >> .env
          echo "FTP_SERVER=${{ secrets.PRODUCTION_FTP_SERVER }}" >> .env
          echo "FTP_USERNAME=${{ secrets.PRODUCTION_FTP_USERNAME }}" >> .env
          echo "FTP_PASSWORD=${{ secrets.PRODUCTION_FTP_PASSWORD }}" >> .env
          EOL

      - name: üöß Aktiviere Wartungsmodus
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd callflows.de/
            touch .maintenance

      - name: üóÑÔ∏è Backup
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd callflows.de/
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            tar -czf backups/backup-${timestamp}.tar.gz ./out
            mysqldump -h ${{ secrets.PRODUCTION_DB_HOST }} -u ${{ secrets.PRODUCTION_DB_USER }} -p${{ secrets.PRODUCTION_DB_PASS }} ${{ secrets.PRODUCTION_DB_NAME }} > backups/db-backup-${timestamp}.sql || true

      - name: üèóÔ∏è Build
        run: npm run build

      - name: üßπ Empty remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd callflows.de/
            rm -rf * .env

      - name: üì§ Deploy to Production
        env:
          FTP_SERVER: ${{ secrets.PRODUCTION_FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.PRODUCTION_FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.PRODUCTION_FTP_PASSWORD }}
        run: |
          npm install ftp-deploy
          node scripts/deploy.js
      - name: üßπ Clean npm cache
        run: |
          rm -rf node_modules
          rm -f package-lock.json

      - name: üü¢ Deaktiviere Wartungsmodus
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd callflows.de/
            rm -f .maintenance

